# main.py

"""
Sistema Principal de Monitoramento Clim√°tico
===========================================

Este √© o arquivo principal que executa todas as quest√µes da Global Solution.
Permite executar quest√µes individuais atrav√©s de um menu interativo.

Desenvolvido para: Global Solution - Computational Thinking with Python (2SEM2025)

Estrutura do projeto:
- risco.py: Fun√ß√µes de an√°lise de riscos clim√°ticos (4 fun√ß√µes)
- validacao.py: Fun√ß√µes de valida√ß√£o e verifica√ß√£o (2 fun√ß√µes)  
- analise.py: Fun√ß√µes de an√°lise de dados meteorol√≥gicos (2 fun√ß√µes)
- alertas.py: Fun√ß√µes de sistema de alertas (2 fun√ß√µes)
- main.py: Arquivo principal com menu de execu√ß√£o
"""

# Importa√ß√µes dos m√≥dulos organizados
from bibliotecas.risco import *
from bibliotecas.validacao import *
from bibliotecas.analise import *
from bibliotecas.alertas import *

def executar_questao_1():
    """
    Quest√£o 1: Verificar risco de inunda√ß√£o por chuva
    Replica o comportamento do questao_1.py
    """
    print("\n" + "="*60)
    print("QUEST√ÉO 1: Verificar Risco de Inunda√ß√£o por Chuva")
    print("="*60)
    
    perguntar_mm = float(input("Digite a quantidade de mil√≠metros de chuva prevista para uma cidade: "))
    print(verificar_risco_inundacao_por_chuva(perguntar_mm))

def executar_questao_2():
    """
    Quest√£o 2: Classificar risco
    Replica o comportamento do questao_2.py
    """
    print("\n" + "="*60)
    print("QUEST√ÉO 2: Classificar Risco")
    print("="*60)
    
    perguntar_chuva = float(input("Digite a quantidade de chuva: "))
    print(classificar_risco(perguntar_chuva))

def executar_questao_3():
    """
    Quest√£o 3: Identificar cidades com risco alto
    Replica o comportamento do questao_3.py
    """
    print("\n" + "="*60)
    print("QUEST√ÉO 3: Identificar Cidades com Risco Alto")
    print("="*60)
    
    chuvas = {
        "Mumbai": 120,
        "Delhi": 45,
        "Chennai": 80,
        "Kolkata": 130,
        "Jaipur": 30
    }
    
    print(identificar_cidades_risco_alto_dict(chuvas))

def executar_questao_4():
    """
    Quest√£o 4: Encontrar temperaturas extremas
    Replica o comportamento do questao_4.py
    """
    print("\n" + "="*60)
    print("QUEST√ÉO 4: Encontrar Temperaturas Extremas")
    print("="*60)
    
    temperaturas = []

    for i in range(5):
        temperatura = float(input(f"Digite a temperatura {i+1} em ( graus Celsius ): "))
        temperaturas.append(temperatura)

    print(encontrar_temperaturas_extremas(temperaturas))

def executar_questao_5():
    """
    Quest√£o 5: Enviar alertas em lote
    Replica o comportamento do questao_5.py
    """
    print("\n" + "="*60)
    print("QUEST√ÉO 5: Enviar Alertas em Lote")
    print("="*60)
    
    cidades = ["Mumbai", "Delhi", "Chennai", "Kolkata", "Jaipur"]
    enviar_alertas_lote(cidades)

def executar_questao_6():
    """
    Quest√£o 6: Calcular m√©dia semanal de chuva
    Replica o comportamento do questao_6.py
    """
    print("\n" + "="*60)
    print("QUEST√ÉO 6: Calcular M√©dia Semanal de Chuva")
    print("="*60)
    
    chuvas_diarias = []

    for i in range(7):
        chuva = float(input(f"Digite a quantidade de chuva do dia {i+1} em ( mm ): "))
        chuvas_diarias.append(chuva)

    media_critica, msg_critica = calcular_media_chuva_semanal_e_alertar(chuvas_diarias)
    print(f"M√©dia de chuva (cr√≠tica): {media_critica:.2f}mm.\nMensagem: '{msg_critica}'")

def executar_questao_7():
    """
    Quest√£o 7: Simular contagem de dias de onda de calor
    Replica o comportamento do questao_7.py
    """
    print("\n" + "="*60)
    print("QUEST√ÉO 7: Simular Contagem de Dias de Onda de Calor")
    print("="*60)
    
    simular_contagem_dias_onda_calor()

def executar_questao_8():
    """
    Quest√£o 8: Validar nome da cidade
    Replica o comportamento do questao_8.py
    """
    print("\n" + "="*60)
    print("QUEST√ÉO 8: Validar Nome da Cidade")
    print("="*60)
    
    nome = input("Digite o nome da cidade: ")
    print(validar_nome_cidade(nome))

def executar_questao_9():
    """
    Quest√£o 9: Filtrar cidades por risco
    Replica o comportamento do questao_9.py
    """
    print("\n" + "="*60)
    print("QUEST√ÉO 9: Filtrar Cidades por Risco")
    print("="*60)
    
    cidades = [
        {"cidade": "S√£o Paulo", "risco": "alto"},
        {"cidade": "Rio de Janeiro", "risco": "m√©dio"},
        {"cidade": "Bras√≠lia", "risco": "baixo"},
        {"cidade": "Salvador", "risco": "alto"},
        {"cidade": "Fortaleza", "risco": "m√©dio"}
    ]

    cidades_filtradas = filtrar_cidades_por_risco(cidades)

    for cidade in cidades_filtradas:
        print(f"Cidade: {cidade['cidade']} - Risco: {cidade['risco']}")

def executar_questao_10():
    """
    Quest√£o 10: Verificar n√≠vel do rio
    Replica o comportamento do questao_10.py
    """
    print("\n" + "="*60)
    print("QUEST√ÉO 10: Verificar N√≠vel do Rio")
    print("="*60)
    
    nivel_rio = float(input("Digite o n√≠vel do rio em ( metros ): "))
    print(verificar_nivel_rio(nivel_rio))

def mostrar_menu():
    """Exibe o menu principal"""
    print("\n" + "="*70)
    print("SISTEMA DE MONITORAMENTO CLIM√ÅTICO - GLOBAL SOLUTION")
    print("="*70)
    print("Escolha qual quest√£o deseja executar:")
    print()
    print(" [1]  Quest√£o 1  - Verificar risco de inunda√ß√£o por chuva")
    print(" [2]  Quest√£o 2  - Classificar risco")
    print(" [3]  Quest√£o 3  - Identificar cidades com risco alto")
    print(" [4]  Quest√£o 4  - Encontrar temperaturas extremas")
    print(" [5]  Quest√£o 5  - Enviar alertas em lote")
    print(" [6]  Quest√£o 6  - Calcular m√©dia semanal de chuva")
    print(" [7]  Quest√£o 7  - Simular onda de calor")
    print(" [8]  Quest√£o 8  - Validar nome da cidade")
    print(" [9]  Quest√£o 9  - Filtrar cidades por risco")
    print(" [10] Quest√£o 10 - Verificar n√≠vel do rio")
    print()
    print(" [0]  Sair")
    print("="*70)

def main():
    """Fun√ß√£o principal que controla o menu e execu√ß√£o"""
    
    print("üå¶Ô∏è  Sistema de Monitoramento Clim√°tico - Global Solution")
    print("üìÅ M√≥dulos carregados com sucesso:")
    print("   ‚úì risco.py - An√°lise de riscos clim√°ticos")
    print("   ‚úì validacao.py - Valida√ß√µes e verifica√ß√µes")
    print("   ‚úì analise.py - An√°lise de dados meteorol√≥gicos")
    print("   ‚úì alertas.py - Sistema de alertas")
    
    while True:
        try:
            mostrar_menu()
            opcao = input("\n‚û§ Digite o n√∫mero da quest√£o que deseja executar: ").strip()
            
            if opcao == "1":
                executar_questao_1()
            elif opcao == "2":
                executar_questao_2()
            elif opcao == "3":
                executar_questao_3()
            elif opcao == "4":
                executar_questao_4()
            elif opcao == "5":
                executar_questao_5()
            elif opcao == "6":
                executar_questao_6()
            elif opcao == "7":
                executar_questao_7()
            elif opcao == "8":
                executar_questao_8()
            elif opcao == "9":
                executar_questao_9()
            elif opcao == "10":
                executar_questao_10()
            elif opcao == "0":
                print("\nüëã Encerrando sistema...")
                print("Obrigado por usar o Sistema de Monitoramento Clim√°tico!")
                break
            else:
                print("\n‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 0 a 10.")
                
        except ValueError as e:
            print(f"\n‚ùå Erro de entrada: {e}")
            print("Por favor, digite um valor num√©rico v√°lido.")
        except KeyboardInterrupt:
            print("\n\nüëã Sistema interrompido pelo usu√°rio. Encerrando...")
            break
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {e}")
            print("Tentando continuar...")
        
        # Pausa antes de mostrar o menu novamente
        input("\n‚è∏Ô∏è  Pressione Enter para voltar ao menu principal...")

if __name__ == "__main__":
    main()